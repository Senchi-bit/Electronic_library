// <auto-generated />
using Library.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Library.Entities
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241202203328_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("authorId");

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("bookId");

                    b.HasKey("AuthorId", "BookId")
                        .HasName("AuthorBook_pkey");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBook", (string)null);
                });

            modelBuilder.Entity("Library.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullName");

                    b.HasKey("Id")
                        .HasName("Authors_pkey");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Library.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer")
                        .HasColumnName("releaseYear");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("Books_pkey");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.Entities.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("YearBased")
                        .HasColumnType("integer")
                        .HasColumnName("yearBased");

                    b.HasKey("Id")
                        .HasName("exhibitions_pkey");

                    b.ToTable("Exhibitions");
                });

            modelBuilder.Entity("Library.Entities.ExhibitionsBook", b =>
                {
                    b.Property<int>("ExhibitionId")
                        .HasColumnType("integer")
                        .HasColumnName("exhibitionId");

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("bookId");

                    b.HasKey("ExhibitionId", "BookId")
                        .HasName("ExhibitionsBooks_pkey");

                    b.ToTable("ExhibitionsBooks");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Library.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("authorId_fk");

                    b.HasOne("Library.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("bookId_fk");
                });
#pragma warning restore 612, 618
        }
    }
}
